const express = require('express')
const {registerFormValidation, loginFormValidation} = require('../validations/validation')
const User = require('../models/User')
const bcryptjs = require('bcryptjs')
const jsonwebtoken = require('jsonwebtoken')

const router = express.Router()


router.get('/',(req,res)=>{
    res.send('Go to /register to register and go to /login for login')
})

router.get('/register',(req,res)=>{
    res.send('Your in the registration page. Go ahead and register on MiniWall.')
})

router.post('/register', async (req,res)=>{
    //Validate the data entered by user.
    const {error} = registerFormValidation(req.body)
    if (error) {
        return res.status(400).send({message:error['details'][0]['message']})
    }

    //Check if the user exists based on email entered.
    const userExists = await User.findOne({email:req.body.email}) 
                    && await User.findOne({username:req.body.username})
    if(userExists){
        return res.status(400).send({message:'User already exists'})
    }

    //Encrypt password before saving the user data.
    const salt = await bcryptjs.genSalt(5)
    const hashedPassword = await bcryptjs.hash(req.body.password, salt)

    //Create user object to save.
    const user = new User({
        username: req.body.username,
        email: req.body.email,
        password: hashedPassword
        })
    try{
        //Save user to database.
        const savedUser = await user.save()

        //Create auth token for newly created user and let user know that they are authenticated 
        //and can proceed to browse page.
        const token = getAuthToken(savedUser)
        res.header('auth-token', token).send('User created, proceed to MiniWall browse posts!')
    }catch(err){
        console.log(err)
        res.status(400).send({message:err})
    }
})

router.get('/login',(req,res)=>{
    res.send('You are in the login page. Go ahead and login on MiniWall.')
})

router.post('/login', async (req,res)=>{
    //Validate login details provided by user in the body and send error if details are not valid.
    const {error} = loginFormValidation(req.body)
    if (error) {
        return res.status(400).send({message:error['details'][0]['message']})
    }

    //Compare the details with the email and check if the user exists, else send error if no match of the user found.
    const user = await User.findOne({email:req.body.email})
    if(!user){
        return res.status(400).send({message:'User does not exists!'})
    }

    //Validate password of the useraccount provided by the user.
    const passwordValidation = await bcryptjs.compare(req.body.password, user.password)
    if(!passwordValidation){
        return res.status(401).send({message:'Password is wrong!'})
    }

    //Create the token for password and return to user.
    const token = getAuthToken(user)
    res.header('auth-token', token).send({'auth-token':token})
})

//To protect the password/token from being displayed on the screen.
const getAuthToken = (user)=>{
    return jsonwebtoken.sign({_id:user._id}, process.env.TOKEN_SECRET)
}

module.exports = router