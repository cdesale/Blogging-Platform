const express = require('express')
const {verifyToken} = require('../validations/validation')
const Post = require('../models/Post')
const jsonwebtoken = require('jsonwebtoken')
const User = require('../models/User')
const Comment = require('../models/Comment')
const {postFormValidation, commentFormValidation} = require('../validations/validation')

const router = express.Router()

const EXCLUDE_USER_ATTRIBUTES = '-email -password -date -__v'

router.get('/feed', verifyToken, async(req,res)=>{
    try{
        const posts = await Post.find()
                                .sort({'likesCount': -1, 'timeStamp':-1})
                                .populate('likes', EXCLUDE_USER_ATTRIBUTES)
                                .populate('owner', EXCLUDE_USER_ATTRIBUTES)
                                .populate(   
                                {
                                    path: 'comments',
                                    model: Comment,
                                    populate: {
                                        path: 'owner',
                                        model: User,
                                        select: 'username'
                                    }
                                })
        res.send(posts)
    }catch(err){
        res.status(400).send({message:err})
    }
})

router.post('/create', verifyToken, async(req, res)=>{
    const {error} = postFormValidation(req.body)
    if (error) {
        return res.status(400).send({message:error['details'][0]['message']})
    }

    const post = new Post({
        title: req.body.title,
        description: req.body.description,
        owner: getRequestUserId(req),
        comments: [],
        likes: [],
        likesCount: 0
    })
    try{
        const savedPost = await post.save()
        res.send(savedPost)
    }catch(err){
        res.status(400).send({message:err})
    }
})

router.post('/like/:postId', verifyToken, async(req,res)=>{
    let post
    try{
        post = await Post.findById(req.params.postId).populate('owner')
    }catch(err){
        return res.status(400).send({message:err})
    }
    
    if (!post) {
        return res.status(400).send("Post not found!")
    }
    
    const postOwnerUserId = post.owner._id.toString()
    const requestUserId = getRequestUserId(req)
    if(postOwnerUserId === requestUserId){
        return res.status(400).send('You cannot like your own post!')
    }

    if(post.likes.includes(requestUserId)){
        return res.status(400).send('You have already liked this post!')
    }
    
    post.likes.push(requestUserId)
    post.likesCount = post.likes.length
    
    // Strangely Mongoose doesn't include array attributes if they are empty.
    if (post.comments.length == 0) {
        // Set an empty array for comments attribute otherwise the save
        // command below throws an error.
        post.comments = []
    }

    try{
        const savedPost = await post.save()
        res.send("You have liked this post!")
    }catch(err){
        res.status(400).send({message:err})
    }
})

router.get('/like/:postId', verifyToken, async(req, res) => {
    let post
    try{
        post = await Post.findById(req.params.postId).populate('likes', EXCLUDE_USER_ATTRIBUTES)
    }catch(err){
        return res.status(400).send({message:err})
    }
    
    if (!post) {
        return res.status(400).send("Post not found!")
    }
    
    res.send(post.likes)
})

router.post('/comment/:postId', verifyToken, async(req, res)=>{
    const {error} = commentFormValidation(req.body)
    if (error) {
        return res.status(400).send({message:error['details'][0]['message']})
    }

    let post
    try{
        post = await Post.findById(req.params.postId).populate('owner')
    }catch(err){
        return res.status(400).send({message:err})
    }

    if (!post) {
        return res.status(400).send("Post not found!")
    }

    const postOwnerUserId = post.owner._id.toString()
    const requestUserId = getRequestUserId(req)
    if(postOwnerUserId === requestUserId){
        return res.status(400).send('You cannot comment on your own post!')
    }

    const comment = new Comment({
        commentText: req.body.commentText,
        owner: requestUserId
    })

    let savedComment
    try{
        savedComment = await comment.save()
    }catch(err){
        return res.status(400).send({message:err})
    }
    
    post.comments.push(savedComment._id)

    // Strangely Mongoose doesn't include array attributes if they are empty.
    if (post.likes.length == 0) {
        // Set an empty array for likes attribute otherwise the save command
        // below throws an error.
        post.likes = []
    }

    try{
        const savedPost = await post.save()
        res.send("You have commented on this post!")
    }catch(err){
        res.status(400).send({message:err})
    }
})

router.get('/comment/:postId', verifyToken, async(req, res) => {
    let post
    try{
        post = await Post.findById(req.params.postId)
                         .populate(   
                         {
                             path: 'comments',
                             model: Comment,
                             populate: {
                                 path: 'owner',
                                 model: User,
                                 select: 'username'
                             }
                         })
    }catch(err){
        return res.status(400).send({message:err})
    }
    
    if (!post) {
        return res.status(400).send("Post not found!")
    }
    
    res.send(post.comments)
})

const getRequestUserId = (req)=>{
    const token = req.header('auth-token')
    const decodedToken = jsonwebtoken.verify(token, process.env.TOKEN_SECRET)
    return decodedToken._id
}


module.exports = router 
